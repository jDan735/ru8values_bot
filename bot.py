# -*- coding: utf8 -*-
from aiogram import executor

import logging
import json
import yaml
import math

from os import environ
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

if "TOKEN" in environ:
    TOKEN = environ["TOKEN"]

else:
    with open("token.json") as file:
        token = json.loads(file.read())
        TOKEN = token["token"]

        heroku = False

with open("data/ideologies.json", encoding="UTF8") as file:
    ideologies = json.loads(file.read())

with open("data/questions.json", encoding="UTF8") as file:
    questions = json.loads(file.read())

max_econ, max_dipl, max_govt, max_scty = 0, 0, 0, 0
for question in questions:
    max_econ += question["effect"]["econ"]
    max_dipl += question["effect"]["dipl"]
    max_govt += question["effect"]["govt"]
    max_scty += question["effect"]["scty"]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start(message):
    q = 1
    call = f"{{q: {q}, econ: 0, dipl: 0, govt: 0, scty: 0}}"

    start_btn = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                                     callback_data=call)
    keyboard = InlineKeyboardMarkup().add(start_btn)

    await message.reply('<b>8values</b> ‚Äî —ç—Ç–æ, –ø–æ —Å—É—Ç–∏, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Å—å–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º. –í–∞–º –±—É–¥—É—Ç –¥–∞–Ω—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, –æ—Ç <b>üü¢ (–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω)</b> –¥–æ <b>üî¥ (–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω)</b>, –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–ª–µ–≥–∫–∞ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π –æ—Å–∏. –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–∞–≤–∞—è –≤–∞–º –ø—Ä–æ—Ü–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ!\n\n–í –¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ <b>69</b> –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–§–æ—Ä–∫ –∏ —á–∞—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–¥–µ–ª–∞–Ω—ã <a href="https://t.me/ysamtme">@ysamtme</a> (–±—É–¥—É —Ä–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è—Ö). –ë–æ—Ç —Å–¥–µ–ª–∞–Ω <a href="t.me/jdan734">@jDan734</a>', disable_web_page_preview=True, parse_mode="HTML", reply_markup=keyboard)  # noqa: E501


def calc_score(score, max_):
    return (100 * (max_ + score) / (2 * max_))


@dp.callback_query_handler(lambda call: call.data.startswith("{"))
async def process_callback_button1(call: types.CallbackQuery):
    data = yaml.load(call.data)
    q_max = len(questions) - 1
    q_id = int(data["q"])

    if data["q"] > q_max:
        await bot.answer_callback_query(call.id)

        equality = calc_score(data["econ"], max_econ)
        peace = calc_score(data["dipl"], max_dipl)
        liberty = calc_score(data["govt"], max_govt)
        progress = calc_score(data["scty"], max_scty)

        ideology = ""

        for ideology in ideologies:
            dist = 0
            dist += (ideology["stats"]["econ"] - equality) ** 2
            dist += (ideology["stats"]["govt"] - liberty) ** 2
            dist += (ideology["stats"]["dipl"] - peace) ** 1.73856063
            dist += (ideology["stats"]["scty"] - progress) ** 1.73856063
            if isinstance(dist, complex):
                ideology_ = ideology["name"]

        ideology = f"–í–∞—à–∞ –∏–¥–µ–æ–ª–æ–≥–∏—è: <b>{ideology_}</b>"

        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=ideology, parse_mode="HTML")
        return

    data["q"] += 1
    question = questions[q_id]

    keyboard = InlineKeyboardMarkup()

    btns = []
    for num, btn_text in enumerate(["üü¢", "üü©", "‚¨úÔ∏è", "üü•", "üî¥"]):
        new_data = data.copy()
        prop = [1, 0.5, 0, -0.5, -1]
        del_ = prop[num]

        for param in ["econ", "dipl", "govt", "scty"]:
            new_data[param] += question["effect"][param] * del_

        new_data = yaml.dump(new_data).replace("\n", ", ")[0:-2]
        new_data = f"{{{new_data}}}"

        btn = InlineKeyboardButton(text=btn_text,
                                   callback_data=new_data)
        btns.append(btn)

    keyboard.row(*btns)
    question_text = question["question"][0:-1]
    text = f"–í–æ–ø—Ä–æ—Å {q_id} –∏–∑ {q_max}: <b>{question_text}</b>"

    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=text, parse_mode="HTML",
                                reply_markup=keyboard)

executor.start_polling(dp)
